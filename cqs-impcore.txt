Reading comprehension for Impcore
=================================

###  Instructions ###

Edit this file, `cqs-impcore.txt`, to answer the questions below. There are
markers indicating where you should write your answers for each question.

Once you've edited the file, submit it by following the steps outlined on the
homework spec.

### Readings and Questions ###

Please read pages 17--26 in *Programming Languages: Build, Prove, and Compare*.

1.  What is the value of the following Impcore expression?

        (if (> 3 5) 17 99)

    > ... your answer here ...

2.  Which of the following best describes the syntactic structure of
    Impcore?

    (a)   An expression can be made with any definition as one of its parts
    (b)   A definition can be made with any expression as one of its parts
    (c)   Both of the above
    (d)   None of the above

    > ... (a), (b), (c), or (d) ...

3.  Does the following Impcore test pass? Please answer "yes" or "no."

        (check-expect (+ 1 2 3) 6)

    > ... yes or no ...

    Assuming `x` is bound to a global variable, does the following
    Impcore test pass? Again, please answer "yes" or "no."

        (check-expect (set x 1) 1)

    > ... yes or no ...

In *Seven Lessons in Program Design*, found on the course website, read the
Introduction and Lesson 1.

4.  I show you a recursive function `f` that takes one argument, 
    a natural number `n`.  The structure of `n`, and therefore the
    internal structure of `f`, are based on the Peano proof system from
    the handout.

    (a) What are the different ways `n` can be formed?

    > 
    
    (b) In the implementation of `f`, what Impcore code should `f` use to
        test the form of `n`?

    > 
    
    (c) For which forms of `n` do you expect `f` to make a recursive call? This
        should match one of the forms you provided in part (a).

    >

    (d) When a recursive call is made, what value is passed as the argument?
        Write this value as an Impcore expression.

    >
    
Read the section titled "What is a contract?" in the Course Style Guidelines
on the course website.

5.  Suppose I write a contract for a `power` function that says, "this
    function multiplies $x$ by itself $n$ times."  According to our
    expectations, is this a good contract or a bad contract?
    Please answer "good" or "bad."

    > 

6.  In *Seven Lessons in Program Design*, just before the end of
    Lesson 1, you will find a section on "Complete process examples."
    This section suggests that the `factorial` function---but not the
    `power` function---could be submitted without a contract.
    
    (a) Why would it be OK to submit the `factorial` function without
        a contract?  For an idea, look at the "Exemplary" column in
        the "Documentation" section of the general coding rubric.

    >

    (b) Why doesn't the same argument apply to the `power` function?
        For an idea, check the design lesson.

    >

You're all done!
