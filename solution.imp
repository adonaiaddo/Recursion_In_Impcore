;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 1


;; (double-digit n) returns a nonnegative integer whose decimal representation 
;; is the same as the decimal representation of integer n, except each digit 
;; appears twice. n must be positive and less than 20,000.

;; laws:
;;  (double-digit n) == (+ (* n 10) n), where (< n 10)
;;  (double-digit (+ (* m 10) d)) == 
;;                                 (+ (double_digit d) (* (double_digit m) 100))

(define double-digit (n)
    (if (< n 10)
        (+ (* n 10) n)
        (+ (* (double-digit (/ n 10)) 100) (double-digit(mod n 10)))))


        ;; unit-tests
        (check-expect (double-digit 9) 99)
        (check-assert (= (double-digit 0) 00))
        (check-expect (double-digit 12345) 1122334455)
        (check-expect (double-digit 11111) 1111111111)
        (check-assert (= (double-digit 10000) 1100000000))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 2


;; (population-count n) returns the number of 1 bits in the binary
;; representation of integer n.

;; laws:
;;   (population-count 0) == 0
;;   (population-count (+ (* m 2) d)) == 
;;                   (+ (population-count (mod n 2)) (population-count (/ m 2)))

(define population-count (n)
    (if (= n 0)
        0
        (+ (population-count (/ n 2)) (mod n 2))))

        ;; unit-tests
        (check-assert (not (population-count 0)))
        (check-expect (population-count 1) 1)
        (check-expect (population-count 5) 2)
        (check-assert (= (population-count 10) 2))
        (check-assert (= (population-count 15) 4))
        (check-assert (= (population-count 4096) 1))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 3


;; (binary n) returns the binary representation of integer n.

;; laws:
;;   (binary 0) == 0
;;   (binary (+ (* m 2) d)) == (+ (* (binary m) 10) d)

(define binary (n)
    (if (= n 0)
        0
        (+ (* (binary (/ n 2)) 10) (mod n 2))))


        ;; unit-tests
        (check-expect (binary 0) 0)
        (check-expect (binary 1) 1)
        (check-expect (binary 8) 1000)
        (check-expect (binary 9) 1001)
        (check-assert (= (binary 10) 1010))
        (check-assert (= (binary 15) 1111))
        (check-assert (= (binary 128) 10000000))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 4


;; (sigma m n) returns the sum of the integers from m to n,
;; where m is an integer and n is an integer greater than or
;; equal to m. 

;; laws:
;;   (sigma m m) == m
;;   (sigma m n) == (+ (sigma (+ m 1) n) m)

(define sigma (m n)
    (if (= m n)
        m
        (+ (sigma (+ m 1) n) m)))


        ;; unit-tests
        (check-expect (sigma 9 9) 9)
        (check-expect (sigma 0 9) 45)
        (check-expect (sigma 0 10) 55)
        (check-assert (= (sigma 9 10) 19))
        (check-assert (= (sigma -100 100) 0))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 5


;; (prime? n) returns 1 if n is prime and 0 otherwise, where n is a
;; nonnegative integer.

;; laws:
;;   (prime? n) == (= n 2), n <= 2
;;   (prime? n) == (prime-helper n 2), n > 2

(define prime? (n)
    (if (<= n 2)
        (= n 2)
        (prime-helper n 2)))


        ;; unit-tests
        (check-expect (prime? 0) 0)
        (check-expect (prime? 1) 0)
        (check-expect (prime? 2) 1)
        (check-expect (prime? 9) 0)
        (check-assert (not (prime? 10)))
        (check-assert (prime? 43))
        (check-assert (prime? 97))
        (check-assert (prime? 101))



;; (prime-helper m n) 1 if no number from n to m-1 is a factor of m, where both
;; m and n are positive integers (n is 2 when function is called)

;; laws:
;;  (prime-helper m n) == 1, (= (- m 1) n)
;;  (prime-helper m n) == 1, (&& (!= (mod m n) 0) (prime-helper m (+ n 1)))

(define prime-helper (m n)
    (if (= (- m 1) n)
        1
        (&& (!= (mod m n) 0) (prime-helper m (+ n 1)))))


        ;; unit-tests
        (check-expect (prime-helper 67 2) 1)
        (check-expect (prime-helper 90 2) 0)
        (check-assert (prime-helper 59 2))
        (check-assert (not(prime-helper 60 2)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;;  Problem 6


;; (nthprime n) calls nthprime-helper helper function which returns the nth
;; prime number

;; laws:
;;  (nthprime n) == (nthprime-helper n 1 0)
;;  [to allow for recursion, we call the recursive function nthprime-helper]

(define nthprime (n)
    (nthprime-helper n 1 0))


        ;; unit-tests
        (check-expect (nthprime 1) 2)
        (check-expect (nthprime 2) 3)
        (check-expect (nthprime 3) 5)
        (check-expect (nthprime 4) 7)
        (check-expect (nthprime 5) 11)
        (check-expect (nthprime 6) 13)
        (check-expect (nthprime 7) 17)
        (check-expect (nthprime 8) 19)
        (check-expect (nthprime 9) 23)
        (check-expect (nthprime 10) 29)
        (check-expect (nthprime 11) 31)
        (check-expect (nthprime 12) 37)
        (check-expect (nthprime 13) 41)
        (check-expect (nthprime 14) 43)
        (check-expect (nthprime 15) 47)
        (check-expect (nthprime 16) 53)
        (check-expect (nthprime 17) 59)
        (check-assert (not (prime? (- (nthprime 18) 1))))
        (check-assert (= (nthprime 19) 67))
        (check-assert (= (nthprime 20) 71))
        (check-assert (prime? (nthprime 30)))
        (check-assert (prime? (nthprime 6)))
        (check-assert (not (prime? (+ 1 (nthprime 7)))))



;; (nthprime-helper nth nums count) returns the nth prime number by recursively
;; keeping track of the natural numbers and the count of prime numbers until the
;; count is up to the nth value given by (nthprime) function

;; laws:
;;  (nthprime-helper nth nums count) == (- nums 1), where (= count nth)
;;  (nthprime-helper nth nums count) == 
;;                      (nthprime-helper nth (+ nums 1) (+ count (prime? nums)))
(define nthprime-helper (nth nums count)
    (if (= count nth)
        (- nums 1)
        (nthprime-helper nth (+ nums 1) (+ count (prime? nums)))))


        ;; unit-tests
        (check-expect (nthprime-helper 1 0 0) 2)
        (check-expect (nthprime-helper 2 0 0) 3)
        (check-expect (nthprime-helper 20 0 16) 7)
        (check-assert (= (nthprime-helper 19 0 3) 53))
        (check-assert (= (nthprime-helper 10 0 0) 29))
        (check-assert (= (nthprime-helper 14 3 0) 47))
